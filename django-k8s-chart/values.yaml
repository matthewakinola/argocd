# Default values for django-k8s-chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

volumes:
  name: django-app-data
  claimName: django-app-pvc

volumeMounts:
  name: django-app-data
  mountPath: /vol/web

replicaCount: 2

image:
  repository: techmatt/k8s
  pullPolicy: Always
  tag: latest

imagePullSecrets: []
nameOverride: django-app
fullnameOverride: django-k8s-chart

#--------DEPLOYMENT-----------------------------

deployment:
  metadata:
  name: django-app
  replicas: 2
  app: django
  tier: app
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    app: django
    tier: app
  containers:
    name: django-image
    image: "{{ .Values.image.repository }}:{{ .Values.image.tag}}"
    ports:
      name: djangoport
      containerPort: 8000
      resources:
        requests:
          cpu: 100m
          memory: 512Mi
        limits:
          cpu: 200m
          memory: 1Gi
  env:
    - name: ALLOWED_HOSTS
      valueFrom:
        configMapKeyRef:
          name: django-configmap
          key: ALLOWED_HOSTS
    - name: DATABASE_URL
      valueFrom:
        configMapKeyRef:
          name: django-configmap 
          key: DATABASE_URL

# ----------------------------------------------


#-----PERSISTENT VOLUME & PERSISTENT VOLUME CLAIM-----------
persistentVolume:
  enabled: {}
  annotations: {}
  name: django-k8s-pv
  namespace: default
  spec:
    capacity:
      storage: 5Gi  
    accessModes:
      - ReadWriteOnce
    persistentVolumeReclaimPolicy: Retain
    storageClassName: k8s-scs
    hostPath:
        path: "/mnt/data"

persistentVolumeClaim:
  name: django-app-pvc
  labels:
    app: django
  spec:
    accessModes:
      - ReadWriteOnce
    storageClassName: k8s-scs
    resources:
      requests:
        storage: 3Gi
# ----------------------------------------------

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  name: django-service
  targetPort: 8000
  port: 80
  type: NodePort

selector:
  app: django
  tier: app

ingress:
  enabled: true
  className: nginx
  annotations: 
    kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: tolulorpeh.fun
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local


autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 60
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# ---------------STORAGE CLASS-------------------
storageClass:
  name: efs-scs
  provisioner: efs.csi.aws.com
  parameters:
    provisioningMode: efs-ap
    fileSystemId: fs-0d1dd66c8b001d6c1
    directoryPerms: "755"
    basePath: "/app"
# ----------------------------------------------

# ---------------SERVICE ACCOUNTS---------------
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: admin-user

#CLUSTER ROLE
clusterRole:
  name: read-only-user
  rules:
    apiGroups:
      - core
    resources: ["*"]
    verbs:
      - get
      - list
      - watch

#CLUSTER ROLE BINDIND
clusterRoleBinding:
  name: read-only-binding
  roleRef:
    name: read-only-clusterrole
  subjects:
  - kind: ServiceAccount
    name: read-only-user
    namespace: kubernetes-dashboard


# -----------------------------------------------